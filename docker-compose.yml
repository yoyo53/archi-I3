services:
  kafka-service:
    container_name: kafka-service
    image: apache/kafka:latest
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:${KAFKA_PORT},CONTROLLER://:${KAFKA_CONTROLLER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_URL}
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:${KAFKA_CONTROLLER_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG4J_OPTS: "-Dlog4j.configuration=file:/opt/kafka/config/custom-log4j.properties"
    volumes:
      - ./kafka/log4j.properties:/opt/kafka/config/custom-log4j.properties
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${KAFKA_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    container_name: user-service
    depends_on:
      kafka-service:
        condition: service_healthy
    build: userservice
    ports:
      - "${USER_SERVER_PORT}:${USER_SERVER_PORT}"
    environment:
      - SERVER_PORT=${USER_SERVER_PORT}
      - SPRING_DATASOURCE_URL=${USER_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${USER_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${USER_DATASOURCE_PASSWORD}
      - SPRING_KAFKA_URL=${KAFKA_URL}
      - SPRING_KAFKA_GROUP=${USER_KAFKA_GROUP}
      - SPRING_KAFKA_TOPIC=${KAFKA_TOPIC}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${USER_SERVER_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  property-service:
    container_name: property-service
    depends_on:
      kafka-service:
        condition: service_healthy
    build: propertyservice
    ports:
      - "${PROPERTY_SERVER_PORT}:${PROPERTY_SERVER_PORT}"
    environment:
      - SERVER_PORT=${PROPERTY_SERVER_PORT}
      - SPRING_DATASOURCE_URL=${PROPERTY_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${PROPERTY_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${PROPERTY_DATASOURCE_PASSWORD}
      - SPRING_KAFKA_URL=${KAFKA_URL}
      - SPRING_KAFKA_GROUP=${PROPERTY_KAFKA_GROUP}
      - SPRING_KAFKA_TOPIC=${KAFKA_TOPIC}
      - LOCAL_TIMEZONE=${LOCAL_TIMEZONE}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${PROPERTY_SERVER_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5

  investment-service:
    container_name: investment-service
    depends_on:
      kafka-service:
        condition: service_healthy
    build: investmentservice
    ports:
      - "${INVESTMENT_SERVER_PORT}:${INVESTMENT_SERVER_PORT}"
    environment:
      - SERVER_PORT=${INVESTMENT_SERVER_PORT}
      - SPRING_DATASOURCE_URL=${INVESTMENT_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${INVESTMENT_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${INVESTMENT_DATASOURCE_PASSWORD}
      - SPRING_KAFKA_URL=${KAFKA_URL}
      - SPRING_KAFKA_GROUP=${INVESTMENT_KAFKA_GROUP}
      - SPRING_KAFKA_TOPIC=${KAFKA_TOPIC}
      - LOCAL_TIMEZONE=${LOCAL_TIMEZONE}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${INVESTMENT_SERVER_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5

  wallet-service:
    container_name: wallet-service
    depends_on:
      kafka-service:
        condition: service_healthy
    build: walletservice
    ports:
      - "${WALLET_SERVER_PORT}:${WALLET_SERVER_PORT}"
    environment:
      - SERVER_PORT=${WALLET_SERVER_PORT}
      - SPRING_DATASOURCE_URL=${WALLET_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${WALLET_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${WALLET_DATASOURCE_PASSWORD}
      - SPRING_KAFKA_URL=${KAFKA_URL}
      - SPRING_KAFKA_GROUP=${WALLET_KAFKA_GROUP}
      - SPRING_KAFKA_TOPIC=${KAFKA_TOPIC}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${WALLET_SERVER_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5

  payment-service:
    container_name: payment-service
    depends_on:
      kafka-service:
        condition: service_healthy
    build: paymentservice
    ports:
      - "${PAYMENT_SERVER_PORT}:${PAYMENT_SERVER_PORT}"
    environment:
      - SERVER_PORT=${PAYMENT_SERVER_PORT}
      - SPRING_DATASOURCE_URL=${PAYMENT_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${PAYMENT_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${PAYMENT_DATASOURCE_PASSWORD}
      - SPRING_KAFKA_URL=${KAFKA_URL}
      - SPRING_KAFKA_GROUP=${PAYMENT_KAFKA_GROUP}
      - SPRING_KAFKA_TOPIC=${KAFKA_TOPIC}
      - LOCAL_TIMEZONE=${LOCAL_TIMEZONE}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${PAYMENT_SERVER_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5


  notification-service:
    container_name: notification-service
    depends_on:
      kafka-service:
        condition: service_healthy
    build: notificationservice
    ports:
      - "${NOTIFICATION_SERVER_PORT}:${NOTIFICATION_SERVER_PORT}"
    environment:
      - SERVER_PORT=${NOTIFICATION_SERVER_PORT}
      - SPRING_DATASOURCE_URL=${NOTIFICATION_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${NOTIFICATION_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${NOTIFICATION_DATASOURCE_PASSWORD}
      - SPRING_KAFKA_URL=${KAFKA_URL}
      - SPRING_KAFKA_GROUP=${NOTIFICATION_KAFKA_GROUP}
      - SPRING_KAFKA_TOPIC=${KAFKA_TOPIC}
      - LOCAL_TIMEZONE=${LOCAL_TIMEZONE}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${NOTIFICATION_SERVER_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5

  certificate-service:
    container_name: certificate-service
    depends_on:
      kafka-service:
        condition: service_healthy
    build: certificateservice
    ports:
      - "${CERTIFICATE_SERVER_PORT}:${CERTIFICATE_SERVER_PORT}"
    environment:
      - SERVER_PORT=${CERTIFICATE_SERVER_PORT}
      - SPRING_DATASOURCE_URL=${CERTIFICATE_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${CERTIFICATE_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${CERTIFICATE_DATASOURCE_PASSWORD}
      - SPRING_KAFKA_URL=${KAFKA_URL}
      - SPRING_KAFKA_GROUP=${CERTIFICATE_KAFKA_GROUP}
      - SPRING_KAFKA_TOPIC=${KAFKA_TOPIC}
      - LOCAL_TIMEZONE=${LOCAL_TIMEZONE}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${CERTIFICATE_SERVER_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5

  income-service:
    container_name: income-service
    depends_on:
      kafka-service:
        condition: service_healthy
    build: incomeservice
    ports:
      - "${INCOME_SERVER_PORT}:${INCOME_SERVER_PORT}"
    environment:
      - SERVER_PORT=${INCOME_SERVER_PORT}
      - SPRING_DATASOURCE_URL=${INCOME_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${INCOME_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${INCOME_DATASOURCE_PASSWORD}
      - SPRING_KAFKA_URL=${KAFKA_URL}
      - SPRING_KAFKA_GROUP=${INCOME_KAFKA_GROUP}
      - SPRING_KAFKA_TOPIC=${KAFKA_TOPIC}
      - LOCAL_TIMEZONE=${LOCAL_TIMEZONE}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${INCOME_SERVER_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5

  time-service:
    container_name: time-service
    depends_on:
      kafka-service:
        condition: service_healthy
    build: timeservice
    ports:
      - "${TIME_SERVER_PORT}:${TIME_SERVER_PORT}"
    environment:
      - SERVER_PORT=${TIME_SERVER_PORT}
      - SPRING_KAFKA_URL=${KAFKA_URL}
      - SPRING_KAFKA_GROUP=${TIME_KAFKA_GROUP}
      - SPRING_KAFKA_TOPIC=${KAFKA_TOPIC}
      - LOCAL_TIMEZONE=${LOCAL_TIMEZONE}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${TIME_SERVER_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5